#+TITLE: Présidentielles 2022
#+SUBTITLE: Cahier de laboratoire
#+STARTUP: hideblocks show2levels

#+PROPERTY: header-args :eval never-export
#+PROPERTY: header-args+ :session journal :comments yes

Dans ce document nous recensons les analyses que nous avons pu faire au jour le jours.

#+description: Load the virtual environment
#+begin_src elisp :session :exports none :results silent
(pyvenv-workon 'polls)
#+end_src

#+description: Import needed libraries
#+begin_src python :session :results silent :exports none
import src.intentions
import numpy as np
import pymc3 as pm

colors = {
    "Poutou": "#DD1C1A",
    "Arthaud": "#DD1C1A",
    "Roussel": "#DD1C1A",
    "Mélenchon": "#E85D75",
    "Hidalgo": "#FF7F11",
    "Jadot": "#B2C9AB",
    "Montebourg": "#FF7F11",
    "Macron": "#748CAB",
    "Pécresse": "#748CAB",
    "Lassalle": "#748CAB",
    "Asselineau": "#748CAB",
    "Zemmour": "#080708",
    "Peuvent changer d'avis": "#080708",
    "Dupont-Aignan": "#2E294E",
    "Le Pen": "#292F36",
    "Philippot": "#292F36",
}
#+end_src


* Décembre 2021
** Odoxa 09.12
:PROPERTIES:
    :BEGIN: 07/12/2021
    :END: 09/12/2021
    :BASE: Comptant aller voter
:END:

Premier sondage d'Odoxa après l'officialisation de la candidature de Pécresse pour Les Républicains.

#+begin_src python :session :results silent
num_exprimes = 1391
precision = 0.25
resultats = {
    "Arthaud": 1,
    "Poutou": 1.5,
    "Roussel": 2,
    "Mélenchon": 10,
    "Montebourg": 1,
    "Hidalgo": 3,
    "Jadot": 6,
    "Macron": 24,
    "Pécresse": 19,
    "Dupont-Aignan": 2.5,
    "Zemmour": 12,
    "Le Pen": 17,
    "Lassalle": 1,
}
assert sum(list(resultats.values())) == 100
#+end_src

#+begin_src python :session :async true :results silent
with pm.Model() as bva:
    prior_intentions = np.array(
        [1, 1.5, 2, 10, 1, 3, 6, 24, 19, 2.5, 12, 17, 1]
    ) * 0.1
    results_r = np.array(list(resultats.values())) / 100
    precision_r = precision / 100

    p = pm.Dirichlet("intentions", prior_intentions)  # Prior too vague?
    r = pm.Dirichlet("real_ratios", num_exprimes * p, observed=results_r)

    trace = pm.sample()
#+end_src

#+begin_src python :session :results file :exports results :var filename=(org-babel-temp-file "figure" ".png")
import arviz as az
import matplotlib.pyplot as plt

az.plot_trace(trace)
plt.savefig(filename, bbox_inches='tight')
filename
#+end_src

#+RESULTS:
[[file:/tmp/babel-5lYmj3/figureEAx2hR.png]]


#+begin_src python :session :results file :exports both :var filename=(org-babel-temp-file "figure" ".png")
intentions_r = {k: trace['intentions'][:,i] for i,k in enumerate(resultats.keys())}
fig = src.intentions.plot(
    intentions_r,
    colors,
    "09/12/2021",
    "Odoxa pour L'OBS et mascaret",
    title="Intentions de vote au premier tour",
    sample_size=num_exprimes,
    base="Comptant aller voter et exprimant une opinion",
    logo_path="~/org/roam/images/logo.png"
)
plt.tight_layout()
plt.savefig(filename, dpi=600, bbox_inches="tight")
filename
#+end_src
#+attr_org: :width 500
#+RESULTS:
[[file:/tmp/babel-5lYmj3/figure7ejmnm.png]]


Odoxa ne spécifie pas le % de gens qui sont surs de leur choix, impossible de donner d'autre information.

** BVA 08.12
:PROPERTIES:
    :BEGIN: 06/12/2021
    :END: 08/12/2021
    :BASE: Certaines d'aller voter
:END:

#+begin_src python :session :results silent
num_exprimes = 894
precision = 0.25
resultats = {
    "Arthaud": .5,
    "Poutou": 1.5,
    "Mélenchon": 9,
    "Roussel": 2.5,
    "Montebourg": 1,
    "Hidalgo": 5,
    "Jadot": 7,
    "Macron": 24,
    "Pécresse": 17,
    "Dupont-Aignan": 2.5,
    "Zemmour": 13,
    "Le Pen": 16,
    "Lassalle": 1,
}
assert sum(list(resultats.values())) == 100
#+end_src

#+RESULTS:
:results:
:end:

#+begin_src python :session :async true
with pm.Model() as bva:
    prior_intentions = np.array(
        [.5, 1.5, 9, 2.5, 1, 5, 7, 24, 17, 2.5, 13, 16, 1]
    )
    results_r = np.array(list(resultats.values())) / 100
    precision_r = precision / 100

    p = pm.Dirichlet("intentions", prior_intentions)  # Prior too vague?
    r = pm.Dirichlet("real_ratios", num_exprimes * p, observed=results_r)

    trace = pm.sample()
#+end_src


#+RESULTS:

#+begin_src python :session :results file :exports results :var filename=(org-babel-temp-file "figure" ".png")
import arviz as az
import matplotlib.pyplot as plt
az.plot_trace(trace)
plt.savefig(filename, bbox_inches='tight')
filename
#+end_src

#+RESULTS:
[[file:/tmp/babel-VWjkW3/figure0p2VLy.png]]

#+begin_src python :session :results file :exports both :var filename=(org-babel-temp-file "figure" ".png")
intentions_r = {k: trace['intentions'][:,i] for i,k in enumerate(resultats.keys())}
fig = src.intentions.plot(
    intentions_r,
    colors,
    "08/12/2021",
    "BVA pour Orange et RTL",
    title="Intentions de vote au premier tour",
    sample_size=num_exprimes,
    base="Certains d'aller voter et exprimant une opinion",
    logo_path="~/org/roam/images/logo.png"
)
plt.tight_layout()
plt.savefig(filename, dpi=600, bbox_inches="tight")
filename
#+end_src

#+attr_org: :width 600
#+RESULTS:
[[file:/tmp/babel-VWjkW3/figurePTbhcD.png]]

Il serait quand même judicieux de mettre les gens n'ayant pas exprimé d'opinion sur les graphes.

*** Intentions de vote des gens sûrs leur choix

#+begin_src python :session :results silent
import math

certains_total = 71
certains = {
    "Mélenchon": 74,
    "Hidalgo": 51,
    "Jadot": 48,
    "Macron": 73,
    "Pécresse": 60,
    "Zemmour": 65,
    "Le Pen": 74,
}

# On fait l'hypothèse (assez bien vérifié quand on regarde les chiffres)
resultats_certains = {}
total = 0
remaining = 0
for i, c in enumerate(resultats):
    try:
        num_certains = trace['intentions'][:, i] * certains[c] / 100
        resultats_certains[c] = num_certains
        total += num_certains
    except:
        resultats_certains[c] = trace['intentions'][:, i]
        total += trace['intentions'][:, i]

for c in resultats:
    resultats_certains[c] /= total
#+end_src

#+begin_src python :session :results file :exports both :var filename=(org-babel-temp-file "figure" ".png")
intentions_r = {k: v for k, v in resultats_certains.items()}
fig = src.intentions.plot(
    intentions_r,
    colors,
    "08/12/2021",
    "BVA pour Orange et RTL",
    title="Intentions de vote au premier tour",
    sample_size=num_exprimes,
    base="Certains d'aller voter et sûrs de leur choix",
    logo_path="~/org/roam/images/logo.png"
)
plt.tight_layout()
plt.savefig(filename, dpi=600, bbox_inches="tight")
filename
#+end_src

#+attr_org: :width 500
#+RESULTS:
[[file:/tmp/babel-OuSpkx/figurehbOufB.png]]

** Distribution multinomiale comme modèle d'observation :model:

Je prends pour acquis depuis le début que le modèle Dirichlet-Dirichlet donne les mêmes résultats que le modèle Dirichlet-Multinomial correspondant, mais cela n'a rien d'évident.

J'ai rencontré l'idée la première fois dans cette [[https://liu.diva-portal.org/smash/get/diva2:945786/FULLTEXT01.pdf][thèse de master]] (3.1.2.5). Alors que la pertinence du modèle d'observation multinomial se justifie très bien ici, celle du modèle d'observation dirichlet pour les ratios est à confirmer (les résultats ont l'air semblables) mathématiquement.

Les instituts de sondages ne donnent pas les valeurs des intentions brutes mais il les arrondissent à l'entier le plus proche (ou demi-point de pourcentage le plus proche) ce qui induit une incertitude supplémentaire. Décidons d'abandonner le modèle Dirichlet-Dirichlet pour l'instant pour revenir à un modèle Dirichlet-Multinomial basique. On y inclut directement l'effet de l'arrondi, en disant que l'on n'oberver pas directement le ratio $r$ mais $\tilde{r}$ :

#+begin_src latex :results raw
\begin{align*}
  \boldsymbol{p} &\sim \operatorname{Dirichlet}(\boldsymbol{\alpha})\\
  \mathbf{n}  &\sim \operatorname{Multinomial}\left(\mathbf{p}, N)\\
  \mathbf{r}  &= \frac{\mathbf{n}}{N}\\
  \tilde{\mathbf{r}} &\sim \operatorname{Uniform}(\mathrm{r}-\delta, \mathrm{r}+\delta)\\
\end{align*}
#+end_src

#+RESULTS:
\begin{align*}
  \boldsymbol{p} &\sim \operatorname{Dirichlet}(\boldsymbol{\alpha})\\
  \mathbf{n}  &\sim \operatorname{Multinomial}\left(\mathbf{p}, N)\\
  \mathbf{r}  &= \frac{\mathbf{n}}{N}\\
  \tilde{\mathbf{r}} &\sim \operatorname{Uniform}(\mathrm{r}-\delta, \mathrm{r}+\delta)\\
\end{align*}

Le modèle s'implémente très facilement dans PyMC3:

#+begin_src python :session :async true
results_r = np.array(list(resultats.values())) / 100
precision_r = precision / 100

with pm.Model() as multinomial:
    prior_intentions = np.array(
        [.5, 1.5, 9, 2.5, 1, 5, 7, 24, 17, 2.5, 13, 16, 1]
    ) * 0.1
    p = pm.Dirichlet("intentions", prior_intentions, shape=(1,len(prior_intentions)))
    n = pm.Multinomial("respondants", num_exprimes, p, shape=(1, len(prior_intentions)))
    r = n / num_exprimes
    r_obs = pm.Uniform('observed', r-precision_r, r+precision_r, observed=results_r)

    trace = pm.sample()
#+end_src

#+RESULTS:

#+begin_src python :session :results file :exports results :var filename=(org-babel-temp-file "figure" ".png")
import arviz as az
import matplotlib.pyplot as plt

with multinomial:
    az.plot_trace(trace)
    plt.savefig(filename, bbox_inches='tight')
print(filename)
#+end_src

#+RESULTS:
:results:
[[file:/tmp/babel-B798aL/figure3RFaIr.png]]
:end:

#+begin_src python :session :results file :exports both :var filename=(org-babel-temp-file "figure" ".png")
intentions_r = {k: trace['intentions'][:,0, i] for i,k in enumerate(resultats.keys())}
fig = src.intentions.plot(
    intentions_r,
    colors,
    "08/12/2021",
    "BVA pour Orange et RTL",
    title="Intentions de vote au premier tour",
    sample_size=num_exprimes,
    base="Certains d'aller voter et exprimant une opinion",
    logo_path="~/org/roam/images/logo.png"
)
plt.tight_layout()
plt.savefig(filename, dpi=600, bbox_inches="tight")
print(filename)
#+end_src

#+attr_org: :width 500
#+RESULTS:
[[file:None]]

On voit que les intervalles de confiance sont légèrement élargis. /Supposons maintenant que les résultats sont données à plus ou moins un point près!

#+begin_src python :session :async true
results_r = np.array(list(resultats.values())) / 100
precision_r = 1. / 100

with pm.Model() as multinomial:
    prior_intentions = np.array(
        [.5, 1.5, 9, 2.5, 1, 5, 7, 24, 17, 2.5, 13, 16, 1]
    )
    p = pm.Dirichlet("intentions", prior_intentions, shape=(1,len(prior_intentions)))
    n = pm.Multinomial("respondants", num_exprimes, p, shape=(1, len(prior_intentions)))
    r = n / num_exprimes
    r_obs = pm.Uniform('observed', r-precision_r, r+precision_r, observed=results_r)

    trace = pm.sample()
#+end_src

#+RESULTS:

#+begin_src python :session :results file :exports results :var filename=(org-babel-temp-file "figure" ".png")
import arviz as az
import matplotlib.pyplot as plt
az.plot_trace(trace)
plt.savefig(filename, bbox_inches='tight')
filename
#+end_src

#+RESULTS:
[[file:/tmp/babel-OuSpkx/figureqJfd6w.png]]

#+begin_src python :session :results file :exports both :var filename=(org-babel-temp-file "figure" ".png")
intentions_r = {k: trace['intentions'][:,0, i] for i,k in enumerate(resultats.keys())}
fig = src.intentions.plot(
    intentions_r,
    colors,
    "08/12/2021",
    "BVA pour Orange et RTL",
    title="Intentions de vote au premier tour",
    sample_size=num_exprimes,
    base="Certains d'aller voter et exprimant une opinion",
    logo_path="~/org/roam/images/logo.png"
)
plt.tight_layout()
plt.savefig(filename, dpi=600, bbox_inches="tight")
filename
#+end_src

#+attr_org: :width 500
#+RESULTS:
[[file:/tmp/babel-3mBQmE/figureQeoqFc.png]]

** TODO Nouvelle représentation des indécis, etc :viz:
    - Pour la présentation brute mettre les gens qui n'expriment pas d'intention de vote sur la courbe
    - Avec les gens sûrs de leur choix mettre le % d'indécis en plus
    - Pour mettre opinions brutes et certains de leur choix sur le meme graphe:
      Superposer les intervalles, avec un rond creux pour les certains d'aller voter
** Pairwise comparisons :viz:
[2021-12-14 Tue]

Randomly scattering points does not give great results. can probably improve the layout using /blue noise/. The idea to get a good enough plot (we're not aiming for accuracy on *these* plots) would be to:

1. [[https://github.com/rougier/scientific-visualization-book/blob/master/code/beyond/bluenoise.py][Generate]] a set of points $N_p$ st $N_p \gg 100$ between -20% et +20%
2. For each simulation, find the point with the closest x value. Set to occupied.
3. Then only display the occupied circles.

[2021-12-15 Wed]


Dans le contexte d'une primaire à gauche comparons les résultats des différents candidats:

#+begin_src python :session :results file graphics :exports results :var filename=(org-babel-temp-file "" ".png")
fig = src.intentions.plot_pair(intentions_r, colors, "Jadot", "Hidalgo")
plt.savefig(filename, bbox_inches="tight")
filename
#+end_src

#+RESULTS:
[[file:/tmp/babel-B798aL/atyK4m.png]]


regardons les résultats potentiels de "l'union de la gauche":

#+begin_src python :session :results file graphics :exports results :var filename=(org-babel-temp-file "" ".png")
intentions_r["Union de la gauche"] = intentions_r["Mélenchon"] + intentions_r["Jadot"] + intentions_r["Hidalgo"] + intentions_r["Montebourg"]
colors["Union de la gauche"] = colors["Mélenchon"]
fig = src.intentions.plot_pair(intentions_r, colors, "Union de la gauche", "Pécresse")
plt.savefig(filename, bbox_inches="tight")
filename
#+end_src

#+RESULTS:
[[file:/tmp/babel-B798aL/t4Ws7E.png]]


#+begin_src python :session :async true :results file :exports both :var filename=(org-babel-temp-file "" ".png")
import matplotlib.pyplot as plt
import os
from pygifsicle import optimize
import imageio

reference = "Le Pen"
challenger = "Pécresse"

wins = np.ceil(100 * np.sum(intentions_r[reference]>intentions_r[challenger]) / len(intentions_r[reference]))

filenames = []
for i in range(1, 100):
    if i % 10 == 0:
        print(i)
    plt.clf()
    fig = src.intentions.plot_pair(
        intentions_r,
        colors,
        reference,
        challenger,
        scores={reference: f"{wins:.0f} sur 100", challenger: f"{100-wins:.0f} sur 100"},
        num_points=i
    )

    filename = f"intentions-pairwise-{i}.png"
    plt.savefig(filename, bbox_inches="tight")
    filenames.append(filename)

with imageio.get_writer("intentions-pairwise.gif", mode="I") as writer:
    for filename in filenames:
        image = imageio.imread(filename)
        writer.append_data(image)

optimize("intentions-pairwise.gif", "optimized.gif")  # For creating a new one

for filename in set(filenames):
    os.remove(filename)
#+end_src

#+RESULTS:
[[file:]]

**** DONE Ajouter légende sur le graphe
**** DONE Placer points avec blue noise
**** DONE Compute location of vertical lines automatically

** DONE Add latest polls :data:
** DONE Clean the database on github :data:
** TODO Use ridgeline plots to show evolution of vote for Pécresse for instance :viz:
 See [[https://clauswilke.com/dataviz/boxplots-violins.html][Figure 9.12]] here, very beautiful.

** Harris 13.12
:PROPERTIES:
    :BEGIN: 10/12/2021
    :END: 13/12/2021
    :BASE: Inscrits sur les listes électorales
:END:

#+begin_src python :session :results silent
num_exprimes = int(2159 * (1-0.12))
precision = 0.5
resultats = {
    #"Arthaud": 0,
    "Poutou": 1,
    "Roussel": 2,
    "Mélenchon": 11,
    "Montebourg": 1,
    "Hidalgo": 4,
    "Jadot": 7,
    "Macron": 24,
    "Pécresse": 17,
    "Dupont-Aignan": 2,
    "Zemmour": 15,
    "Le Pen": 16,
    #"Lassalle": 0,
    #"Philippot": 0,
    #"Asselineau": 0,
}
assert sum(list(resultats.values())) == 100
#+end_src

#+begin_src python :session :async true
results_r = np.array(list(resultats.values())) / 100
precision_r = precision / 100

with pm.Model() as multinomial:
    prior_intentions = np.array(
        [1, 2, 11, 1, 4, 7, 24, 17, 2, 15, 16]
    ) * 0.1
    p = pm.Dirichlet("intentions", prior_intentions, shape=(1,len(prior_intentions)))
    n = pm.Multinomial("respondants", num_exprimes, p, shape=(1, len(prior_intentions)))
    r = n / num_exprimes
    r_obs = pm.Uniform('observed', r-precision_r, r+precision_r, observed=results_r)

    trace = pm.sample()
#+end_src

#+RESULTS:

#+begin_src python :session :results file :exports results :var filename=(org-babel-temp-file "figure" ".png")
import arviz as az
import matplotlib.pyplot as plt

with multinomial:
    az.plot_trace(trace)
    plt.savefig(filename, bbox_inches='tight')
filename
#+end_src

#+RESULTS:
[[file:/tmp/babel-B798aL/figurek2eqJC.png]]

#+begin_src python :session :results file :exports both :var filename=(org-babel-temp-file "figure" ".png")
intentions_r = {k: trace['intentions'][:,0, i] for i,k in enumerate(resultats.keys())}
fig = src.intentions.plot(
    intentions_r,
    colors,
    "13/12/2021",
    "Harris interactive for Challenges",
    title="Intentions de vote au premier tour",
    sample_size=num_exprimes,
    base="Inscrits sur les listes électorales",
    logo_path="~/org/roam/images/logo.png"
)
plt.tight_layout()
plt.savefig(filename, dpi=600, bbox_inches="tight")
filename
#+end_src

#+attr_org: :width 500
#+RESULTS:
[[file:/tmp/babel-B798aL/figure9jWzjU.png]]

#+begin_src python :session :async true :results file :exports both :var filename=(org-babel-temp-file "" ".png")
fig = src.intentions.plot_pair(
    intentions_r,
    colors,
    "Le Pen",
    "Pécresse",
    num_points=100
)
plt.savefig(filename, bbox_inches="tight")
filename
#+end_src

#+RESULTS:
[[file:/tmp/babel-B798aL/veCirZ.png]]


#+begin_src python :session :async true :results file :exports both :var filename=(org-babel-temp-file "" ".png")
import matplotlib.pyplot as plt
import os
from pygifsicle import optimize
import imageio

reference = "Le Pen"
challenger = "Pécresse"

wins = np.ceil(100 * np.sum(intentions_r[reference]>intentions_r[challenger]) / len(intentions_r[reference]))

filenames = []
for i in range(1, 100):
    if i % 10 == 0:
        print(i)
    plt.clf()
    fig = src.intentions.plot_pair(
        intentions_r,
        colors,
        reference,
        challenger,
        scores={reference: f"{wins:.0f} sur 100", challenger: f"{100-wins:.0f} sur 100"},
        num_points=i
    )

    filename = f"intentions-pairwise-{i}.png"
    plt.savefig(filename, bbox_inches="tight")
    filenames.append(filename)

with imageio.get_writer("intentions-pairwise.gif", mode="I") as writer:
    for filename in filenames:
        image = imageio.imread(filename)
        writer.append_data(image)

optimize("intentions-pairwise.gif", "lepenpecresse.gif")  # For creating a new one

for filename in set(filenames):
    os.remove(filename)
#+end_src

#+RESULTS:
[[file:/tmp/babel-B798aL/python-xgnGdG]]

#+begin_src python :session :async true :results file :exports both :var filename=(org-babel-temp-file "" ".png")
import matplotlib.pyplot as plt
import os
from pygifsicle import optimize
import imageio

reference = "Le Pen"
challenger = "Zemmour"

wins = np.ceil(100 * np.sum(intentions_r[reference]>intentions_r[challenger]) / len(intentions_r[reference]))

filenames = []
for i in range(1, 100):
    if i % 10 == 0:
        print(i)
    plt.clf()
    fig = src.intentions.plot_pair(
        intentions_r,
        colors,
        reference,
        challenger,
        scores={reference: f"{wins:.0f} sur 100", challenger: f"{100-wins:.0f} sur 100"},
        num_points=i
    )

    filename = f"intentions-pairwise-{i}.png"
    plt.savefig(filename, bbox_inches="tight")
    filenames.append(filename)

with imageio.get_writer("intentions-pairwise.gif", mode="I") as writer:
    for filename in filenames:
        image = imageio.imread(filename)
        writer.append_data(image)

optimize("intentions-pairwise.gif", "zemmourlepen.gif")  # For creating a new one

for filename in set(filenames):
    os.remove(filename)
#+end_src

#+RESULTS:
[[file:]]

** Opinionway 15.12
:PROPERTIES:
    :BEGIN: 13/12/2021
    :END: 15/12/2021
    :BASE: Inscrits sur les listes électorales
:END:

#+begin_src python :session :results silent
num_exprimes = int(1470 * (1-0.16))
precision = 1.
resultats = {
    "Arthaud": 1,
    "Poutou": 1,
    "Roussel": 3,
    "Mélenchon": 9,
    "Montebourg": 2,
    "Hidalgo": 4,
    "Jadot": 8,
    "Macron": 24,
    "Pécresse": 17,
    "Dupont-Aignan": 2,
    "Zemmour": 12,
    "Le Pen": 16,
    "Lassalle": 1,
    #"Philippot": 0,
    #"Asselineau": 0,
}
assert sum(list(resultats.values())) == 100
#+end_src

#+begin_src python :session :async true
results_r = np.array(list(resultats.values())) / 100
precision_r = precision / 100

with pm.Model() as multinomial:
    prior_intentions = np.array(
        [1, 1, 3, 9, 2, 4, 8, 24, 17, 2, 12, 16, 1]
    ) * 0.1
    p = pm.Dirichlet("intentions", prior_intentions, shape=(1,len(prior_intentions)))
    n = pm.Multinomial("respondants", num_exprimes, p, shape=(1, len(prior_intentions)))
    r = n / num_exprimes
    r_obs = pm.Uniform('observed', r-precision_r, r+precision_r, observed=results_r)

    trace = pm.sample()
#+end_src

#+RESULTS:

#+begin_src python :session :results file :exports results :var filename=(org-babel-temp-file "figure" ".png")
import arviz as az
import matplotlib.pyplot as plt

with multinomial:
    az.plot_trace(trace)
    plt.savefig(filename, bbox_inches='tight')
filename
#+end_src

#+RESULTS:
[[file:/tmp/babel-SJxqMQ/figuresvVTFe.png]]

#+begin_src python :session :results file :exports both :var filename=(org-babel-temp-file "figure" ".png")
intentions_r = {k: trace['intentions'][:,0, i] for i,k in enumerate(resultats.keys())}
fig = src.intentions.plot(
    intentions_r,
    colors,
    "15/12/2021",
    "Opinionway pour Les Echos et Radio Classique",
    title="Intentions de vote au premier tour",
    sample_size=num_exprimes,
    base="Inscrits sur les listes électorales",
    logo_path="~/org/roam/images/logo.png"
)
plt.tight_layout()
plt.savefig(filename, dpi=200, bbox_inches="tight")
filename
#+end_src

#+attr_org: :width 500
#+RESULTS:
[[file:/tmp/babel-SJxqMQ/figure2M59Zh.png]]

#+begin_src python :session :async true :results file :exports both :var filename=(org-babel-temp-file "" ".png")
fig = src.intentions.plot_pair(
    intentions_r,
    colors,
    "Le Pen",
    "Pécresse",
    num_points=100
)
plt.savefig(filename, bbox_inches="tight")
filename
#+end_src

#+RESULTS:
[[file:/tmp/babel-SJxqMQ/vAkUGN.png]]


#+begin_src python :session :async true :results file :exports both :var filename=(org-babel-temp-file "" ".png")
fig = src.intentions.plot_pair(
    intentions_r,
    colors,
    "Jadot",
    "Mélenchon",
    num_points=100
)
plt.savefig(filename, bbox_inches="tight")
filename
#+end_src

#+RESULTS:
[[file:/tmp/babel-SJxqMQ/Fnmff2.png]]


#+begin_src python :session :async true :results file :exports both :var filename=(org-babel-temp-file "" ".png")
fig = src.intentions.plot_pair(
    intentions_r,
    colors,
    "Zemmour",
    "Mélenchon",
    num_points=100
)
plt.savefig(filename, bbox_inches="tight")
filename
#+end_src

#+RESULTS:
[[file:/tmp/babel-SJxqMQ/U9UISJ.png]]

#+begin_src python :session :async true :results file :exports both :var filename=(org-babel-temp-file "" ".png")
fig = src.intentions.plot_pair(
    intentions_r,
    colors,
    "Hidalgo",
    "Roussel",
    num_points=100
)
plt.savefig(filename, bbox_inches="tight")
filename
#+end_src

#+RESULTS:
[[file:/tmp/babel-SJxqMQ/y8Aq8J.png]]

#+begin_src python :session :async true :results file :exports both :var filename=(org-babel-temp-file "" ".png")
import matplotlib.pyplot as plt
import os
from pygifsicle import optimize
import imageio

reference = "Le Pen"
challenger = "Pécresse"

wins = np.ceil(100 * np.sum(intentions_r[reference]>intentions_r[challenger]) / len(intentions_r[reference]))

filenames = []
for i in range(1, 100):
    if i % 10 == 0:
        print(i)
    plt.clf()
    fig = src.intentions.plot_pair(
        intentions_r,
        colors,
        reference,
        challenger,
        scores={reference: f"{wins:.0f} sur 100", challenger: f"{100-wins:.0f} sur 100"},
        num_points=i
    )

    filename = f"intentions-pairwise-{i}.png"
    plt.savefig(filename, bbox_inches="tight")
    filenames.append(filename)

with imageio.get_writer("intentions-pairwise.gif", mode="I") as writer:
    for filename in filenames:
        image = imageio.imread(filename)
        writer.append_data(image)

optimize("intentions-pairwise.gif", "lepenpecresse.gif")  # For creating a new one

for filename in set(filenames):
    os.remove(filename)
#+end_src

#+RESULTS:
[[file:]]

#+begin_src python :session :async true :results file :exports both :var filename=(org-babel-temp-file "" ".png")
import matplotlib.pyplot as plt
import os
from pygifsicle import optimize
import imageio

reference = "Jadot"
challenger = "Mélenchon"

wins = np.ceil(100 * np.sum(intentions_r[reference]>intentions_r[challenger]) / len(intentions_r[reference]))

filenames = []
for i in range(1, 100):
    if i % 10 == 0:
        print(i)
    plt.clf()
    fig = src.intentions.plot_pair(
        intentions_r,
        colors,
        reference,
        challenger,
        scores={reference: f"{wins:.0f} sur 100", challenger: f"{100-wins:.0f} sur 100"},
        num_points=i
    )

    filename = f"intentions-pairwise-{i}.png"
    plt.savefig(filename, bbox_inches="tight")
    filenames.append(filename)

with imageio.get_writer("intentions-pairwise.gif", mode="I") as writer:
    for filename in filenames:
        image = imageio.imread(filename)
        writer.append_data(image)

optimize("intentions-pairwise.gif", "jadotmelenchon.gif")  # For creating a new one

for filename in set(filenames):
    os.remove(filename)
#+end_src

#+RESULTS:
[[file:]]

#+begin_src python :session :async true :results file :exports both :var filename=(org-babel-temp-file "" ".png")
import matplotlib.pyplot as plt
import os
from pygifsicle import optimize
import imageio

reference = "Zemmour"
challenger = "Mélenchon"

wins = np.ceil(100 * np.sum(intentions_r[reference]>intentions_r[challenger]) / len(intentions_r[reference]))

filenames = []
for i in range(1, 100):
    if i % 10 == 0:
        print(i)
    plt.clf()
    fig = src.intentions.plot_pair(
        intentions_r,
        colors,
        reference,
        challenger,
        scores={reference: f"{wins:.0f} sur 100", challenger: f"{100-wins:.0f} sur 100"},
        num_points=i
    )

    filename = f"intentions-pairwise-{i}.png"
    plt.savefig(filename, bbox_inches="tight")
    filenames.append(filename)

with imageio.get_writer("intentions-pairwise.gif", mode="I") as writer:
    for filename in filenames:
        image = imageio.imread(filename)
        writer.append_data(image)

optimize("intentions-pairwise.gif", "zemmourmelenchon.gif")  # For creating a new one

for filename in set(filenames):
    os.remove(filename)
#+end_src

#+RESULTS:
[[file:]]

#+begin_src python :session :async true :results file :exports both :var filename=(org-babel-temp-file "" ".png")
import matplotlib.pyplot as plt
import os
from pygifsicle import optimize
import imageio

reference = "Hidalgo"
challenger = "Roussel"

wins = np.ceil(100 * np.sum(intentions_r[reference]>intentions_r[challenger]) / len(intentions_r[reference]))

filenames = []
for i in range(1, 100):
    if i % 10 == 0:
        print(i)
    plt.clf()
    fig = src.intentions.plot_pair(
        intentions_r,
        colors,
        reference,
        challenger,
        scores={reference: f"{wins:.0f} sur 100", challenger: f"{100-wins:.0f} sur 100"},
        num_points=i
    )

    filename = f"intentions-pairwise-{i}.png"
    plt.savefig(filename, bbox_inches="tight")
    filenames.append(filename)

with imageio.get_writer("intentions-pairwise.gif", mode="I") as writer:
    for filename in filenames:
        image = imageio.imread(filename)
        writer.append_data(image)

optimize("intentions-pairwise.gif", "hidalgoroussel.gif")  # For creating a new one

for filename in set(filenames):
    os.remove(filename)
#+end_src

#+RESULTS:
[[file:/tmp/babel-SJxqMQ/python-u2NVUf]]


#+begin_src python :session :async true :results file :exports both :var filename=(org-babel-temp-file "" ".png")
import matplotlib.pyplot as plt
import os
from pygifsicle import optimize
import imageio

reference = "Montebourg"
challenger = "Roussel"

wins = np.ceil(100 * np.sum(intentions_r[reference]>intentions_r[challenger]) / len(intentions_r[reference]))

filenames = []
for i in range(1, 100):
    if i % 10 == 0:
        print(i)
    plt.clf()
    fig = src.intentions.plot_pair(
        intentions_r,
        colors,
        reference,
        challenger,
        scores={reference: f"{wins:.0f} sur 100", challenger: f"{100-wins:.0f} sur 100"},
        num_points=i
    )

    filename = f"intentions-pairwise-{i}.png"
    plt.savefig(filename, bbox_inches="tight")
    filenames.append(filename)

with imageio.get_writer("intentions-pairwise.gif", mode="I") as writer:
    for filename in filenames:
        image = imageio.imread(filename)
        writer.append_data(image)

optimize("intentions-pairwise.gif", "montebourgroussel.gif")  # For creating a new one

for filename in set(filenames):
    os.remove(filename)
#+end_src

#+RESULTS:
[[file:/tmp/babel-SJxqMQ/python-q6atyq]]
