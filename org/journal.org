#+TITLE: Présidentielles 2022
#+SUBTITLE: Cahier de laboratoire

Dans ce document nous recensons les analyses que nous avons pu faire au jour le jours.

#+description: Load the virtual environment
#+begin_src elisp :session :exports none
(pyvenv-workon 'polls)
#+end_src

#+RESULTS:

#+description: Import needed libraries
#+begin_src python :session :results silent :exports none
import src.intentions
import numpy as np
import pymc3 as pm
#+end_src

* Color schemes :noexport:

#+description: Darker colors from coolors.com
#+begin_src python :session :results silent :exports none
colors = {
    "Poutou": "#DD1C1A",
    "Arthaud": "#DD1C1A",
    "Roussel": "#DD1C1A",
    "Mélenchon": "#E85D75",
    "Hidalgo": "#FF7F11",
    "Jadot": "#B2C9AB",
    "Montebourg": "#FF7F11",
    "Macron": "#748CAB",
    "Pécresse": "#748CAB",
    "Lassalle": "#748CAB",
    "Zemmour": "#080708",
    "Peuvent changer d'avis": "#080708",
    "Dupont-Aignan": "#2E294E",
    "Le Pen": "#292F36",
}
#+end_src

* Décembre 2021
** Odoxa 09.12
:PROPERTIES:
    :BEGIN: 07/12/2021
    :END: 09/12/2021
    :BASE: Comptant aller voter
:END:

Premier sondage d'Odoxa après l'officialisation de la candidature de Pécresse pour Les Républicains.

#+begin_src python :session :results silent
num_exprimes = 1391
precision = 0.25
resultats = {
    "Arthaud": 1,
    "Poutou": 1.5,
    "Roussel": 2,
    "Mélenchon": 10,
    "Montebourg": 1,
    "Hidalgo": 3,
    "Jadot": 6,
    "Macron": 24,
    "Pécresse": 19,
    "Dupont-Aignan": 2.5,
    "Zemmour": 12,
    "Le Pen": 17,
    "Lassalle": 1,
}
assert sum(list(resultats.values())) == 100
#+end_src

#+begin_src python :session :async true :results silent
with pm.Model() as bva:
    prior_intentions = np.array(
        [1, 1.5, 2, 10, 1, 3, 6, 24, 19, 2.5, 12, 17, 1]
    ) * 0.1
    results_r = np.array(list(resultats.values())) / 100
    precision_r = precision / 100

    p = pm.Dirichlet("intentions", prior_intentions)  # Prior too vague?
    r = pm.Dirichlet("real_ratios", num_exprimes * p, observed=results_r)

    trace = pm.sample()
#+end_src

#+begin_src python :session :results file :exports results :var filename=(org-babel-temp-file "figure" ".png")
import arviz as az
import matplotlib.pyplot as plt

az.plot_trace(trace)
plt.savefig(filename, bbox_inches='tight')
filename
#+end_src

#+RESULTS:
[[file:/tmp/babel-5lYmj3/figureEAx2hR.png]]


#+begin_src python :session :results file :exports both :var filename=(org-babel-temp-file "figure" ".png")
intentions_r = {k: trace['intentions'][:,i] for i,k in enumerate(resultats.keys())}
fig = src.intentions.plot(
    intentions_r,
    colors,
    "09/12/2021",
    "Odoxa pour L'OBS et mascaret",
    title="Intentions de vote au premier tour",
    sample_size=num_exprimes,
    base="Comptant aller voter et exprimant une opinion",
    logo_path="~/org/roam/images/logo.png"
)
plt.tight_layout()
plt.savefig(filename, dpi=600, bbox_inches="tight")
filename
#+end_src
#+attr_org: :width 500
#+RESULTS:
[[file:/tmp/babel-5lYmj3/figure7ejmnm.png]]


Odoxa ne spécifie pas le % de gens qui sont surs de leur choix, impossible de donner d'autre information.

** BVA 08.12
:PROPERTIES:
    :BEGIN: 06/12/2021
    :END: 08/12/2021
    :BASE: Certaines d'aller voter
:END:

#+begin_src python :session
num_exprimes = 894
precision = 0.25
resultats = {
    "Arthaud": .5,
    "Poutou": 1.5,
    "Mélenchon": 9,
    "Roussel": 2.5,
    "Montebourg": 1,
    "Hidalgo": 5,
    "Jadot": 7,
    "Macron": 24,
    "Pécresse": 17,
    "Dupont-Aignan": 2.5,
    "Zemmour": 13,
    "Le Pen": 16,
    "Lassalle": 1,
}
assert sum(list(resultats.values())) == 100
#+end_src

#+RESULTS:

#+begin_src python :session :async true
with pm.Model() as bva:
    prior_intentions = np.array(
        [.5, 1.5, 9, 2.5, 1, 5, 7, 24, 17, 2.5, 13, 16, 1]
    )
    results_r = np.array(list(resultats.values())) / 100
    precision_r = precision / 100

    p = pm.Dirichlet("intentions", prior_intentions)  # Prior too vague?
    r = pm.Dirichlet("real_ratios", num_exprimes * p, observed=results_r)

    trace = pm.sample()
#+end_src


#+RESULTS:

#+begin_src python :session :results file :exports results :var filename=(org-babel-temp-file "figure" ".png")
import arviz as az
import matplotlib.pyplot as plt
az.plot_trace(trace)
plt.savefig(filename, bbox_inches='tight')
filename
#+end_src

#+RESULTS:
[[file:/tmp/babel-pSa1ZR/figureOix7Ju.png]]

#+begin_src python :session :results file :exports both :var filename=(org-babel-temp-file "figure" ".png")
intentions_r = {k: trace[0]['intentions'][:,i] for i,k in enumerate(resultats.keys())}
fig = src.intentions.plot(
    intentions_r,
    colors,
    "08/12/2021",
    "BVA pour Orange et RTL",
    title="Intentions de vote au premier tour",
    sample_size=num_exprimes,
    base="Certains d'aller voter et exprimant une opinion",
    logo_path="~/org/roam/images/logo.png"
)
plt.tight_layout()
plt.savefig(filename, dpi=600, bbox_inches="tight")
filename
#+end_src

#+attr_org: :width 600
#+RESULTS:
[[file:/tmp/babel-pSa1ZR/figurebUyJZp.png]]

Il serait quand même judicieux de mettre les gens n'ayant pas exprimé d'opinion sur les graphes.

*** Intentions de vote des gens sûrs leur choix

#+begin_src python :session :results silent
import math

certains_total = 71
certains = {
    "Mélenchon": 74,
    "Hidalgo": 51,
    "Jadot": 48,
    "Macron": 73,
    "Pécresse": 60,
    "Zemmour": 65,
    "Le Pen": 74,
}

# On fait l'hypothèse (assez bien vérifié quand on regarde les chiffres)
resultats_certains = {}
total = 0
remaining = 0
for i, c in enumerate(resultats):
    try:
        num_certains = trace['intentions'][:, i] * certains[c] / 100
        resultats_certains[c] = num_certains
        total += num_certains
    except:
        resultats_certains[c] = trace['intentions'][:, i]
        total += trace['intentions'][:, i]

for c in resultats:
    resultats_certains[c] /= total
#+end_src

#+begin_src python :session :results file :exports both :var filename=(org-babel-temp-file "figure" ".png")
intentions_r = {k: v for k, v in resultats_certains.items()}
fig = src.intentions.plot(
    intentions_r,
    colors,
    "08/12/2021",
    "BVA pour Orange et RTL",
    title="Intentions de vote au premier tour",
    sample_size=num_exprimes,
    base="Certains d'aller voter et sûrs de leur choix",
    logo_path="~/org/roam/images/logo.png"
)
plt.tight_layout()
plt.savefig(filename, dpi=600, bbox_inches="tight")
filename
#+end_src

#+attr_org: :width 500
#+RESULTS:
[[file:/tmp/babel-l2eJnd/figurey9MbqB.png]]

*** Tenir compte des erreurs d'arrondi pour les incertitudes :model:

Les instituts de sondages ne donnent pas les valeurs des intentions brutes mais il les arrondissent à l'entier le plus proche (ou demi-point de pourcentage le plus proche) ce qui induit une incertitude supplémentaire.

La seule façon vraiment propre de tenir compte des ces erreurs d'arrondi dans PyMC3 est de travailler avec la cumulative (cf [[https://mc-stan.org/docs/2_27/stan-users-guide/bayesian-measurement-error-model.html][cette page du manuel de Stan]]). Or il n'y a pas d'expression analytique ni pour la cumulative de la loi Multinomiale ni pour la loi de Dirichlet. Nous sommes donc obligés de passer par de la likelihood-free inference:

#+begin_src python :session :async true
srng = np.random.default_rng()

def simulate(intentions, errs):
    r = srng.dirichlet(intentions)
    return r + errs

with pm.Model() as model:
    prior_intentions = np.array(
        [.5, 1.5, 9, 2.5, 1, 5, 7, 24, 17, 2.5, 13, 16, 1]
    )
    results_r = np.array(list(resultats.values())) / 100
    precision_r = precision / 100

    intentions = pm.Dirichlet('intentions', prior_intentions)
    errs = pm.Uniform("errs", -precision_r, precision_r, shape=(len(prior_intentions,)))
    result = pm.Simulator('result', simulate, params=(intentions, errs), epsilon=0.03, observed=results_r)

    trace = pm.sample_smc(kernel='ABC', chains=1, parallel=True, save_sim_data=True)
#+end_src


#+RESULTS:

#+begin_src python :session :results file :exports results :var filename=(org-babel-temp-file "figure" ".png")
import arviz as az
import matplotlib.pyplot as plt
az.plot_trace(trace[0])
plt.savefig(filename, bbox_inches='tight')
filename
#+end_src

#+RESULTS:
[[file:/tmp/babel-pSa1ZR/figureTLDmEo.png]]

#+begin_src python :session :results file :exports both :var filename=(org-babel-temp-file "figure" ".png")
intentions_r = {k: trace[0]['intentions'][:,i] for i,k in enumerate(resultats.keys())}
fig = src.intentions.plot(
    intentions_r,
    colors,
    "08/12/2021",
    "BVA pour Orange et RTL",
    title="Intentions de vote au premier tour",
    sample_size=num_exprimes,
    base="Certains d'aller voter et exprimant une opinion",
    logo_path="~/org/roam/images/logo.png"
)
plt.tight_layout()
plt.savefig(filename, dpi=600, bbox_inches="tight")
filename
#+end_src

#+attr_org: :width 600
#+RESULTS:
[[file:/tmp/babel-pSa1ZR/figuremnDc31.png]]

Il est difficile d'obtenir des résultats qui semblent correct. Pire, il est difficile d'estimer /si/ les résultats sont corrects. On fera sans pour le moment.
*** Distribution multinomiale comme modèle d'observation :model:

Je prends pour acquis depuis le début que le modèle Dirichlet-Dirichlet donne les mêmes résultats que le modèle Dirichlet-Multinomial correspondant, mais cela n'a rien d'évident.

J'ai rencontré l'idée la première fois dans cette [[https://liu.diva-portal.org/smash/get/diva2:945786/FULLTEXT01.pdf][thèse de master]] (3.1.2.5). Alors que la pertinence du modèle d'observation multinomial se justifie très bien ici, celle du modèle d'observation dirichlet pour les ratios est à confirmer (les résultats ont l'air semblables) mathématiquement.

Décidons d'abandonner le modèle Dirichlet-Dirichlet pour l'instant pour revenir à un modèle Dirichlet-Multinomial basique. On y inclut directement l'effet de l'arrondi, en disant que l'on n'oberver pas directement le ratio $r$ mais $\tilde{r}$ :

#+begin_src latex :results raw
\begin{align*}
  \boldsymbol{p} &\sim \operatorname{Dirichlet}(\boldsymbol{\alpha})\\
  \mathbf{n}  &\sim \operatorname{Multinomial}\left(\mathbf{p}, N)\\
  \mathbf{r}  &= \frac{\mathbf{n}}{N}\\
  \tilde{\mathbf{r}} &\sim \operatorname{Uniform}(\mathrm{r}-\delta, \mathrm{r}+\delta)\\
\end{align*}
#+end_src

#+RESULTS:
\begin{align*}
  \boldsymbol{p} &\sim \operatorname{Dirichlet}(\boldsymbol{\alpha})\\
  \mathbf{n}  &\sim \operatorname{Multinomial}\left(\mathbf{p}, N)\\
  \mathbf{r}  &= \frac{\mathbf{n}}{N}\\
  \tilde{\mathbf{r}} &\sim \operatorname{Uniform}(\mathrm{r}-\delta, \mathrm{r}+\delta)\\
\end{align*}

Le modèle s'implémente très facilement dans PyMC3:

#+begin_src python :session :async true
results_r = np.array(list(resultats.values())) / 100
precision_r = precision / 100

with pm.Model() as multinomial:
    prior_intentions = np.array(
        [.5, 1.5, 9, 2.5, 1, 5, 7, 24, 17, 2.5, 13, 16, 1]
    ) * 0.1
    p = pm.Dirichlet("intentions", prior_intentions, shape=(1,len(prior_intentions)))
    n = pm.Multinomial("respondants", num_exprimes, p, shape=(1, len(prior_intentions)))
    r = n / num_exprimes
    r_obs = pm.Uniform('observed', r-precision_r, r+precision_r, observed=results_r)

    trace = pm.sample()
#+end_src

#+RESULTS:

#+begin_src python :session :results file :exports results :var filename=(org-babel-temp-file "figure" ".png")
import arviz as az
import matplotlib.pyplot as plt
az.plot_trace(trace)
plt.savefig(filename, bbox_inches='tight')
filename
#+end_src

#+RESULTS:
[[file:/tmp/babel-OuSpkx/figure8HnRPR.png]]

#+begin_src python :session :results file :exports both :var filename=(org-babel-temp-file "figure" ".png")
intentions_r = {k: trace['intentions'][:,0, i] for i,k in enumerate(resultats.keys())}
fig = src.intentions.plot(
    intentions_r,
    colors,
    "08/12/2021",
    "BVA pour Orange et RTL",
    title="Intentions de vote au premier tour",
    sample_size=num_exprimes,
    base="Certains d'aller voter et exprimant une opinion",
    logo_path="~/org/roam/images/logo.png"
)
plt.tight_layout()
plt.savefig(filename, dpi=600, bbox_inches="tight")
filename
#+end_src

#+attr_org: :width 500
#+RESULTS:
[[file:/tmp/babel-OuSpkx/figureFMPKS0.png]]

On voit que les intervalles de confiance sont légèrement élargis. /Supposons maintenant que les résultats sont données à plus ou moins un point près!

#+begin_src python :session :async true
results_r = np.array(list(resultats.values())) / 100
precision_r = 1. / 100

with pm.Model() as multinomial:
    prior_intentions = np.array(
        [.5, 1.5, 9, 2.5, 1, 5, 7, 24, 17, 2.5, 13, 16, 1]
    )
    p = pm.Dirichlet("intentions", prior_intentions, shape=(1,len(prior_intentions)))
    n = pm.Multinomial("respondants", num_exprimes, p, shape=(1, len(prior_intentions)))
    r = n / num_exprimes
    r_obs = pm.Uniform('observed', r-precision_r, r+precision_r, observed=results_r)

    trace = pm.sample()
#+end_src

#+RESULTS:

#+begin_src python :session :results file :exports results :var filename=(org-babel-temp-file "figure" ".png")
import arviz as az
import matplotlib.pyplot as plt
az.plot_trace(trace)
plt.savefig(filename, bbox_inches='tight')
filename
#+end_src

#+RESULTS:
[[file:/tmp/babel-OuSpkx/figureqJfd6w.png]]

#+begin_src python :session :results file :exports both :var filename=(org-babel-temp-file "figure" ".png")
intentions_r = {k: trace['intentions'][:,0, i] for i,k in enumerate(resultats.keys())}
fig = src.intentions.plot(
    intentions_r,
    colors,
    "08/12/2021",
    "BVA pour Orange et RTL",
    title="Intentions de vote au premier tour",
    sample_size=num_exprimes,
    base="Certains d'aller voter et exprimant une opinion",
    logo_path="~/org/roam/images/logo.png"
)
plt.tight_layout()
plt.savefig(filename, dpi=600, bbox_inches="tight")
filename
#+end_src

#+attr_org: :width 500
#+RESULTS:
[[file:/tmp/babel-OuSpkx/figurevmQ4Y8.png]]

** TODO Nouvelle représentation des indécis, etc :viz:
    - Pour la présentation brute mettre les gens qui n'expriment pas d'intention de vote sur la courbe
    - Avec les gens sûrs de leur choix mettre le % d'indécis en plus
    - Pour mettre opinions brutes et certains de leur choix sur le meme graphe:
      Superposer les intervalles, avec un rond creux pour les certains d'aller voter
** TODO Pécresse dans les nouveaux sondages :edito:
** TODO Pairwise comparisons :viz:
